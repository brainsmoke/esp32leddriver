
#
# file format:
#
# header:
# b'\1RANDOMWALK' + uint8(n_choices_per_step) + uint16(n_bias_rows) + uint16(n_positions)
#
# bias rows:
# ( [ uint8(weighing_choice_x) * n_choices_per_step ] * n_bias_rows
#
# position transitions:
# ( [ uint16(pos) * n_choices_per_step ] * n_position_rows
#
# bias transitions:
# ( [ uint16(bias_row_index) * n_choices_per_step ] * n_position_rows
#
# end
#

import sys, array

N_CHOICES_PER_STEP = 8
N_BIAS_ROWS = 8 # 1 for each direction for each side
N_ROWS = 300
out = open(sys.argv[1], "wb")

header = b'\1RANDOMWALK' + bytes( (N_CHOICES_PER_STEP, N_BIAS_ROWS&0xff, N_BIAS_ROWS>>8, N_ROWS&0xff, N_ROWS>>8) )

out.write(header)

WEIGHT_SAME = 64
WEIGHT_TURN = 16
WEIGHT_BACK = 0
WEIGHT_GO_IN = 2
WEIGHT_GO_OUT = 32

bias_rows = bytes( [

WEIGHT_SAME, WEIGHT_TURN, WEIGHT_BACK, WEIGHT_TURN, WEIGHT_GO_IN, WEIGHT_GO_IN, WEIGHT_GO_IN, WEIGHT_GO_IN,
WEIGHT_TURN, WEIGHT_SAME, WEIGHT_TURN, WEIGHT_BACK, WEIGHT_GO_IN, WEIGHT_GO_IN, WEIGHT_GO_IN, WEIGHT_GO_IN, 
WEIGHT_BACK, WEIGHT_TURN, WEIGHT_SAME, WEIGHT_TURN, WEIGHT_GO_IN, WEIGHT_GO_IN, WEIGHT_GO_IN, WEIGHT_GO_IN,
WEIGHT_TURN, WEIGHT_BACK, WEIGHT_TURN, WEIGHT_SAME, WEIGHT_GO_IN, WEIGHT_GO_IN, WEIGHT_GO_IN, WEIGHT_GO_IN,
WEIGHT_SAME, WEIGHT_TURN, WEIGHT_BACK, WEIGHT_TURN, WEIGHT_GO_OUT, WEIGHT_GO_OUT, WEIGHT_GO_OUT, WEIGHT_GO_OUT,
WEIGHT_TURN, WEIGHT_SAME, WEIGHT_TURN, WEIGHT_BACK, WEIGHT_GO_OUT, WEIGHT_GO_OUT, WEIGHT_GO_OUT, WEIGHT_GO_OUT,
WEIGHT_BACK, WEIGHT_TURN, WEIGHT_SAME, WEIGHT_TURN, WEIGHT_GO_OUT, WEIGHT_GO_OUT, WEIGHT_GO_OUT, WEIGHT_GO_OUT,
WEIGHT_TURN, WEIGHT_BACK, WEIGHT_TURN, WEIGHT_SAME, WEIGHT_GO_OUT, WEIGHT_GO_OUT, WEIGHT_GO_OUT, WEIGHT_GO_OUT,

] )

neighbours = [
[  20,  3,  1,295 ], [   0,  2,148,298 ], [   3,  7,147,  1 ], [  21,  6,  2,  0 ], [  24,  9,149,299 ],
[  10,  8,  6, 15 ], [   5,  7,  3, 18 ], [   8,137,  2,  6 ], [  11,136,  7,  5 ], [  14,139,  4, 19 ],
[  15, 13, 11,  5 ], [  10, 12,133,  8 ], [  13, 42,132, 11 ], [  16, 41, 12, 10 ], [  19, 44,134,  9 ],
[   5, 18, 16, 10 ], [  15, 17, 38, 13 ], [  18, 22, 37, 16 ], [   6, 21, 17, 15 ], [   9, 24, 39, 14 ],
[ 295, 23, 21,  0 ], [  20, 22, 18,  3 ], [  23, 27, 17, 21 ], [ 296, 26, 22, 20 ], [ 299, 29, 19,  4 ],
[ 270, 28, 26,290 ], [  25, 27, 23,293 ], [  28, 32, 22, 26 ], [ 271, 31, 27, 25 ], [ 274, 34, 24,294 ],
[  50, 33, 31,265 ], [  30, 32, 28,268 ], [  33, 37, 27, 31 ], [  51, 36, 32, 30 ], [  54, 39, 29,269 ],
[  40, 38, 36, 45 ], [  35, 37, 33, 48 ], [  38, 17, 32, 36 ], [  41, 16, 37, 35 ], [  44, 19, 34, 49 ],
[  45, 43, 41, 35 ], [  40, 42, 13, 38 ], [  43, 72, 12, 41 ], [  46, 71, 42, 40 ], [  49, 74, 14, 39 ],
[  35, 48, 46, 40 ], [  45, 47, 68, 43 ], [  48, 52, 67, 46 ], [  36, 51, 47, 45 ], [  39, 54, 69, 44 ],
[ 265, 53, 51, 30 ], [  50, 52, 48, 33 ], [  53, 57, 47, 51 ], [ 266, 56, 52, 50 ], [ 269, 59, 49, 34 ],
[ 240, 58, 56,260 ], [  55, 57, 53,263 ], [  58, 62, 52, 56 ], [ 241, 61, 57, 55 ], [ 244, 64, 54,264 ],
[  80, 63, 61,235 ], [  60, 62, 58,238 ], [  63, 67, 57, 61 ], [  81, 66, 62, 60 ], [  84, 69, 59,239 ],
[  70, 68, 66, 75 ], [  65, 67, 63, 78 ], [  68, 47, 62, 66 ], [  71, 46, 67, 65 ], [  74, 49, 64, 79 ],
[  75, 73, 71, 65 ], [  70, 72, 43, 68 ], [  73,102, 42, 71 ], [  76,101, 72, 70 ], [  79,104, 44, 69 ],
[  65, 78, 76, 70 ], [  75, 77, 98, 73 ], [  78, 82, 97, 76 ], [  66, 81, 77, 75 ], [  69, 84, 99, 74 ],
[ 235, 83, 81, 60 ], [  80, 82, 78, 63 ], [  83, 87, 77, 81 ], [ 236, 86, 82, 80 ], [ 239, 89, 79, 64 ],
[ 210, 88, 86,230 ], [  85, 87, 83,233 ], [  88, 92, 82, 86 ], [ 211, 91, 87, 85 ], [ 214, 94, 84,234 ],
[ 110, 93, 91,205 ], [  90, 92, 88,208 ], [  93, 97, 87, 91 ], [ 111, 96, 92, 90 ], [ 114, 99, 89,209 ],
[ 100, 98, 96,105 ], [  95, 97, 93,108 ], [  98, 77, 92, 96 ], [ 101, 76, 97, 95 ], [ 104, 79, 94,109 ],
[ 105,103,101, 95 ], [ 100,102, 73, 98 ], [ 103,132, 72,101 ], [ 106,131,102,100 ], [ 109,134, 74, 99 ],
[  95,108,106,100 ], [ 105,107,128,103 ], [ 108,112,127,106 ], [  96,111,107,105 ], [  99,114,129,104 ],
[ 205,113,111, 90 ], [ 110,112,108, 93 ], [ 113,117,107,111 ], [ 206,116,112,110 ], [ 209,119,109, 94 ],
[ 180,118,116,200 ], [ 115,117,113,203 ], [ 118,122,112,116 ], [ 181,121,117,115 ], [ 184,124,114,204 ],
[ 140,123,121,175 ], [ 120,122,118,178 ], [ 123,127,117,121 ], [ 141,126,122,120 ], [ 144,129,119,179 ],
[ 130,128,126,135 ], [ 125,127,123,138 ], [ 128,107,122,126 ], [ 131,106,127,125 ], [ 134,109,124,139 ],
[ 135,133,131,125 ], [ 130,132,103,128 ], [ 133, 12,102,131 ], [ 136, 11,132,130 ], [ 139, 14,104,129 ],
[ 125,138,136,130 ], [ 135,137,  8,133 ], [ 138,142,  7,136 ], [ 126,141,137,135 ], [ 129,144,  9,134 ],
[ 175,143,141,120 ], [ 140,142,138,123 ], [ 143,147,137,141 ], [ 176,146,142,140 ], [ 179,149,139,124 ],
[ 150,148,146,170 ], [ 145,147,143,173 ], [ 148,  2,142,146 ], [ 151,  1,147,145 ], [ 154,  4,144,174 ],
[ 170,153,151,145 ], [ 150,152,298,148 ], [ 153,157,297,151 ], [ 171,156,152,150 ], [ 174,159,299,149 ],
[ 160,158,156,165 ], [ 155,157,153,168 ], [ 158,287,152,156 ], [ 161,286,157,155 ], [ 164,289,154,169 ],
[ 165,163,161,155 ], [ 160,162,283,158 ], [ 163,192,282,161 ], [ 166,191,162,160 ], [ 169,194,284,159 ],
[ 155,168,166,160 ], [ 165,167,188,163 ], [ 168,172,187,166 ], [ 156,171,167,165 ], [ 159,174,189,164 ],
[ 145,173,171,150 ], [ 170,172,168,153 ], [ 173,177,167,171 ], [ 146,176,172,170 ], [ 149,179,169,154 ],
[ 120,178,176,140 ], [ 175,177,173,143 ], [ 178,182,172,176 ], [ 121,181,177,175 ], [ 124,184,174,144 ],
[ 200,183,181,115 ], [ 180,182,178,118 ], [ 183,187,177,181 ], [ 201,186,182,180 ], [ 204,189,179,119 ],
[ 190,188,186,195 ], [ 185,187,183,198 ], [ 188,167,182,186 ], [ 191,166,187,185 ], [ 194,169,184,199 ],
[ 195,193,191,185 ], [ 190,192,163,188 ], [ 193,222,162,191 ], [ 196,221,192,190 ], [ 199,224,164,189 ],
[ 185,198,196,190 ], [ 195,197,218,193 ], [ 198,202,217,196 ], [ 186,201,197,195 ], [ 189,204,219,194 ],
[ 115,203,201,180 ], [ 200,202,198,183 ], [ 203,207,197,201 ], [ 116,206,202,200 ], [ 119,209,199,184 ],
[  90,208,206,110 ], [ 205,207,203,113 ], [ 208,212,202,206 ], [  91,211,207,205 ], [  94,214,204,114 ],
[ 230,213,211, 85 ], [ 210,212,208, 88 ], [ 213,217,207,211 ], [ 231,216,212,210 ], [ 234,219,209, 89 ],
[ 220,218,216,225 ], [ 215,217,213,228 ], [ 218,197,212,216 ], [ 221,196,217,215 ], [ 224,199,214,229 ],
[ 225,223,221,215 ], [ 220,222,193,218 ], [ 223,252,192,221 ], [ 226,251,222,220 ], [ 229,254,194,219 ],
[ 215,228,226,220 ], [ 225,227,248,223 ], [ 228,232,247,226 ], [ 216,231,227,225 ], [ 219,234,249,224 ],
[  85,233,231,210 ], [ 230,232,228,213 ], [ 233,237,227,231 ], [  86,236,232,230 ], [  89,239,229,214 ],
[  60,238,236, 80 ], [ 235,237,233, 83 ], [ 238,242,232,236 ], [  61,241,237,235 ], [  64,244,234, 84 ],
[ 260,243,241, 55 ], [ 240,242,238, 58 ], [ 243,247,237,241 ], [ 261,246,242,240 ], [ 264,249,239, 59 ],
[ 250,248,246,255 ], [ 245,247,243,258 ], [ 248,227,242,246 ], [ 251,226,247,245 ], [ 254,229,244,259 ],
[ 255,253,251,245 ], [ 250,252,223,248 ], [ 253,282,222,251 ], [ 256,281,252,250 ], [ 259,284,224,249 ],
[ 245,258,256,250 ], [ 255,257,278,253 ], [ 258,262,277,256 ], [ 246,261,257,255 ], [ 249,264,279,254 ],
[  55,263,261,240 ], [ 260,262,258,243 ], [ 263,267,257,261 ], [  56,266,262,260 ], [  59,269,259,244 ],
[  30,268,266, 50 ], [ 265,267,263, 53 ], [ 268,272,262,266 ], [  31,271,267,265 ], [  34,274,264, 54 ],
[ 290,273,271, 25 ], [ 270,272,268, 28 ], [ 273,277,267,271 ], [ 291,276,272,270 ], [ 294,279,269, 29 ],
[ 280,278,276,285 ], [ 275,277,273,288 ], [ 278,257,272,276 ], [ 281,256,277,275 ], [ 284,259,274,289 ],
[ 285,283,281,275 ], [ 280,282,253,278 ], [ 283,162,252,281 ], [ 286,161,282,280 ], [ 289,164,254,279 ],
[ 275,288,286,280 ], [ 285,287,158,283 ], [ 288,292,157,286 ], [ 276,291,287,285 ], [ 279,294,159,284 ],
[  25,293,291,270 ], [ 290,292,288,273 ], [ 293,297,287,291 ], [  26,296,292,290 ], [  29,299,289,274 ],
[   0,298,296, 20 ], [ 295,297,293, 23 ], [ 298,152,292,296 ], [   1,151,297,295 ], [   4,154,294, 24 ]
]


for i,n in enumerate(neighbours):
    if i % 5 == 4:
        n.extend([i-4, i-3, i-2, i-1])
    else:
        n.extend([(i//5)*5+4, (i//5)*5+4, (i//5)*5+4, (i//5)*5+4])

O_TOP_LEFT, O_BOTTOM_LEFT, O_BOTTOM_RIGHT, O_TOP_RIGHT, \
I_TOP_LEFT, I_BOTTOM_LEFT, I_BOTTOM_RIGHT, I_TOP_RIGHT = range(8)

turn_table = 60* [

[ O_BOTTOM_LEFT, O_BOTTOM_LEFT, O_BOTTOM_RIGHT, O_BOTTOM_RIGHT, I_TOP_LEFT, I_BOTTOM_LEFT, I_BOTTOM_RIGHT, I_TOP_RIGHT ],
[ O_BOTTOM_LEFT, O_TOP_LEFT,    O_BOTTOM_RIGHT, O_TOP_RIGHT,    I_TOP_LEFT, I_BOTTOM_LEFT, I_BOTTOM_RIGHT, I_TOP_RIGHT ],
[ O_TOP_LEFT,    O_TOP_LEFT,    O_TOP_RIGHT,    O_TOP_RIGHT,    I_TOP_LEFT, I_BOTTOM_LEFT, I_BOTTOM_RIGHT, I_TOP_RIGHT ],
[ O_TOP_LEFT,    O_BOTTOM_LEFT, O_TOP_RIGHT,    O_BOTTOM_RIGHT, I_TOP_LEFT, I_BOTTOM_LEFT, I_BOTTOM_RIGHT, I_TOP_RIGHT ],
[ I_BOTTOM_LEFT, I_TOP_LEFT,    I_TOP_RIGHT,    I_BOTTOM_RIGHT, O_TOP_LEFT, O_BOTTOM_LEFT, O_BOTTOM_RIGHT, O_TOP_RIGHT],
]

assert len(neighbours) == N_ROWS
for n in neighbours:
    assert len(n) == N_CHOICES_PER_STEP

assert len(turn_table) == N_ROWS
for t in turn_table:
    assert len(t) == N_CHOICES_PER_STEP


out.write( bias_rows )
out.write( array.array("H", (e for row in neighbours for e in row ) ) )
out.write( array.array("H", (e for row in turn_table for e in row ) ) )


